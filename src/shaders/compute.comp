#version 450
#extension GL_ARB_separate_shader_objects : enable

#define PI_OVER_FOUR 0.785398163f

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer Blades {
	  Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	  Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // accumulate num blades remaining
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

const vec3 gE = vec3(0, -3, 0);

void main() {
    const uint bladeIdx = gl_GlobalInvocationID.x;
    
    if (bladeIdx == 0) {
        numBlades.vertexCount = 0;
    }
    barrier();

    // -------------------------
    // APPLY FORCES
    // -------------------------
    Blade thisBlade = blades[bladeIdx];

    vec3 v0 = thisBlade.v0.xyz;
    vec3 v1 = thisBlade.v1.xyz;
    vec3 v2 = thisBlade.v2.xyz;
    const vec3 up = thisBlade.up.xyz;

    const float theta = thisBlade.v0.w;
    const float h = thisBlade.v1.w;
    const float stiffness = thisBlade.up.w;

    // recovery
    vec3 Iv2 = v0 + h * up;
    vec3 Fr = (Iv2 - v2) * stiffness;

    // gravity
    vec3 f = vec3(cos(theta + PI_OVER_FOUR), 0, sin(theta + PI_OVER_FOUR));
    vec3 gF = 0.25 * length(gE) * f;
    vec3 Fg = gE + gF;

    // wind
    vec3 Fw = vec3(-5 * sin(totalTime), 0, 0); // TODO

    vec3 delta = (Fr + Fg + Fw) * deltaTime;

    v2 += delta;
    v2 = v2 - up * min(up * (v2 - v0), 0);
    float lProj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + h * up * max(1 - lProj / h, 0.05 * max(lProj / h, 1));

    float L0 = distance(v0, v2);
    float L1 = distance(v0, v1) + distance(v1, v2);
    // int n = 3;
    // float L = (2 * L0 + (n - 1) * L1) / (n + 1);
    float L = (L0 + L1) * 0.5;

    float r = h / L;
    vec3 v1_corr = v0 + r * (v1 - v0);
    vec3 v2_corr = v1_corr + r * (v2 - v1);

    thisBlade.v1.xyz = v1_corr.xyz;
    thisBlade.v2.xyz = v2_corr.xyz;
    blades[bladeIdx] = thisBlade;

    // -------------------------
    // CULLING
    // -------------------------

    // TODO: early exit here if blade is culled

    const uint culledIdx = atomicAdd(numBlades.vertexCount, 1);
    culledBlades[culledIdx] = thisBlade;
}
