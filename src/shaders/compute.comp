#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer Blades {
	  Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	  Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // num blades remaining
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
    const uint bladeIdx = gl_GlobalInvocationID.x;
    
    if (bladeIdx == 0) {
        numBlades.vertexCount = 0;
    }
    barrier();

    // TODO: Apply forces on every blade and update the vertices in the buffer

    // TODO: Cull blades that are too far away or not in the camera frustum and write the remaining blades
    // to the culled blades buffer

    // early exit here if blade is culled

    uint culledIdx = atomicAdd(numBlades.vertexCount, 1);
    culledBlades[culledIdx] = blades[bladeIdx];
}
